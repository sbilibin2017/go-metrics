// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-metrics/go-metrics/internal/routers/metric_update_path.go

// Package routers is a generated GoMock package.
package routers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	httprouter "github.com/julienschmidt/httprouter"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockRouter) AddHandler(method, path string, handler httprouter.Handle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", method, path, handler)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockRouterMockRecorder) AddHandler(method, path, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockRouter)(nil).AddHandler), method, path, handler)
}
