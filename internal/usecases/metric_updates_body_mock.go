// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/tmp2/go-metrics/internal/usecases/metric_updates_body.go

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	domain "go-metrics/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricUpdatesBodyService is a mock of MetricUpdatesBodyService interface.
type MockMetricUpdatesBodyService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdatesBodyServiceMockRecorder
}

// MockMetricUpdatesBodyServiceMockRecorder is the mock recorder for MockMetricUpdatesBodyService.
type MockMetricUpdatesBodyServiceMockRecorder struct {
	mock *MockMetricUpdatesBodyService
}

// NewMockMetricUpdatesBodyService creates a new mock instance.
func NewMockMetricUpdatesBodyService(ctrl *gomock.Controller) *MockMetricUpdatesBodyService {
	mock := &MockMetricUpdatesBodyService{ctrl: ctrl}
	mock.recorder = &MockMetricUpdatesBodyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdatesBodyService) EXPECT() *MockMetricUpdatesBodyServiceMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockMetricUpdatesBodyService) Update(ctx context.Context, metrics []*domain.Metric) ([]*domain.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, metrics)
	ret0, _ := ret[0].([]*domain.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricUpdatesBodyServiceMockRecorder) Update(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricUpdatesBodyService)(nil).Update), ctx, metrics)
}
