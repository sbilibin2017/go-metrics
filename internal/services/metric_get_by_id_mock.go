// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-metrics/go-metrics/internal/services/metric_get_by_id.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	domain "go-metrics/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricGetByIDFindBatchRepository is a mock of MetricGetByIDFindBatchRepository interface.
type MockMetricGetByIDFindBatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricGetByIDFindBatchRepositoryMockRecorder
}

// MockMetricGetByIDFindBatchRepositoryMockRecorder is the mock recorder for MockMetricGetByIDFindBatchRepository.
type MockMetricGetByIDFindBatchRepositoryMockRecorder struct {
	mock *MockMetricGetByIDFindBatchRepository
}

// NewMockMetricGetByIDFindBatchRepository creates a new mock instance.
func NewMockMetricGetByIDFindBatchRepository(ctrl *gomock.Controller) *MockMetricGetByIDFindBatchRepository {
	mock := &MockMetricGetByIDFindBatchRepository{ctrl: ctrl}
	mock.recorder = &MockMetricGetByIDFindBatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricGetByIDFindBatchRepository) EXPECT() *MockMetricGetByIDFindBatchRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockMetricGetByIDFindBatchRepository) Find(ctx context.Context, filters []domain.MetricID) (map[domain.MetricID]*domain.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filters)
	ret0, _ := ret[0].(map[domain.MetricID]*domain.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMetricGetByIDFindBatchRepositoryMockRecorder) Find(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMetricGetByIDFindBatchRepository)(nil).Find), ctx, filters)
}
