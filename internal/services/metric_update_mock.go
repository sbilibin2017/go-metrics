// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-metrics/go-metrics/internal/services/metric_update.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	domain "go-metrics/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricUpdateSaveBatchRepository is a mock of MetricUpdateSaveBatchRepository interface.
type MockMetricUpdateSaveBatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateSaveBatchRepositoryMockRecorder
}

// MockMetricUpdateSaveBatchRepositoryMockRecorder is the mock recorder for MockMetricUpdateSaveBatchRepository.
type MockMetricUpdateSaveBatchRepositoryMockRecorder struct {
	mock *MockMetricUpdateSaveBatchRepository
}

// NewMockMetricUpdateSaveBatchRepository creates a new mock instance.
func NewMockMetricUpdateSaveBatchRepository(ctrl *gomock.Controller) *MockMetricUpdateSaveBatchRepository {
	mock := &MockMetricUpdateSaveBatchRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateSaveBatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateSaveBatchRepository) EXPECT() *MockMetricUpdateSaveBatchRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricUpdateSaveBatchRepository) Save(ctx context.Context, metrics []*domain.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricUpdateSaveBatchRepositoryMockRecorder) Save(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricUpdateSaveBatchRepository)(nil).Save), ctx, metrics)
}

// MockMetricUpdateFindBatchRepository is a mock of MetricUpdateFindBatchRepository interface.
type MockMetricUpdateFindBatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateFindBatchRepositoryMockRecorder
}

// MockMetricUpdateFindBatchRepositoryMockRecorder is the mock recorder for MockMetricUpdateFindBatchRepository.
type MockMetricUpdateFindBatchRepositoryMockRecorder struct {
	mock *MockMetricUpdateFindBatchRepository
}

// NewMockMetricUpdateFindBatchRepository creates a new mock instance.
func NewMockMetricUpdateFindBatchRepository(ctrl *gomock.Controller) *MockMetricUpdateFindBatchRepository {
	mock := &MockMetricUpdateFindBatchRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateFindBatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateFindBatchRepository) EXPECT() *MockMetricUpdateFindBatchRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockMetricUpdateFindBatchRepository) Find(ctx context.Context, filters []domain.MetricID) (map[domain.MetricID]*domain.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filters)
	ret0, _ := ret[0].(map[domain.MetricID]*domain.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMetricUpdateFindBatchRepositoryMockRecorder) Find(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMetricUpdateFindBatchRepository)(nil).Find), ctx, filters)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUnitOfWork) Do(ctx context.Context, operation func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUnitOfWorkMockRecorder) Do(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUnitOfWork)(nil).Do), ctx, operation)
}
