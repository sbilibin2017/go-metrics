// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/tmp2/go-metrics/internal/services/metric_update.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	sql "database/sql"
	domain "go-metrics/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricUpdateSaveRepository is a mock of MetricUpdateSaveRepository interface.
type MockMetricUpdateSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateSaveRepositoryMockRecorder
}

// MockMetricUpdateSaveRepositoryMockRecorder is the mock recorder for MockMetricUpdateSaveRepository.
type MockMetricUpdateSaveRepositoryMockRecorder struct {
	mock *MockMetricUpdateSaveRepository
}

// NewMockMetricUpdateSaveRepository creates a new mock instance.
func NewMockMetricUpdateSaveRepository(ctrl *gomock.Controller) *MockMetricUpdateSaveRepository {
	mock := &MockMetricUpdateSaveRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateSaveRepository) EXPECT() *MockMetricUpdateSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricUpdateSaveRepository) Save(ctx context.Context, metrics []*domain.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricUpdateSaveRepositoryMockRecorder) Save(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricUpdateSaveRepository)(nil).Save), ctx, metrics)
}

// MockMetricUpdateFindRepository is a mock of MetricUpdateFindRepository interface.
type MockMetricUpdateFindRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateFindRepositoryMockRecorder
}

// MockMetricUpdateFindRepositoryMockRecorder is the mock recorder for MockMetricUpdateFindRepository.
type MockMetricUpdateFindRepositoryMockRecorder struct {
	mock *MockMetricUpdateFindRepository
}

// NewMockMetricUpdateFindRepository creates a new mock instance.
func NewMockMetricUpdateFindRepository(ctrl *gomock.Controller) *MockMetricUpdateFindRepository {
	mock := &MockMetricUpdateFindRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateFindRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateFindRepository) EXPECT() *MockMetricUpdateFindRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockMetricUpdateFindRepository) Find(ctx context.Context, filters []*domain.MetricID) (map[domain.MetricID]*domain.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filters)
	ret0, _ := ret[0].(map[domain.MetricID]*domain.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMetricUpdateFindRepositoryMockRecorder) Find(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMetricUpdateFindRepository)(nil).Find), ctx, filters)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUnitOfWork) Do(ctx context.Context, operation func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockUnitOfWorkMockRecorder) Do(ctx, operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUnitOfWork)(nil).Do), ctx, operation)
}
